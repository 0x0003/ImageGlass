{"version":3,"file":"FrmSettings.js","mappings":"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","sources":["webpack://ig-ui/webpack/universalModuleDefinition","webpack://ig-ui/webpack/bootstrap","webpack://ig-ui/webpack/runtime/make namespace object","webpack://ig-ui/./src/FrmSettings/Language.ts","webpack://ig-ui/./src/helpers/index.ts","webpack://ig-ui/./src/helpers/globalHelpers.ts","webpack://ig-ui/./src/FrmSettings/TabAppearance.ts","webpack://ig-ui/./src/FrmSettings/Sidebar.ts","webpack://ig-ui/./src/FrmSettings/TabGeneral.ts","webpack://ig-ui/./src/FrmSettings/TabImage.ts","webpack://ig-ui/./src/FrmSettings/TabSlideshow.ts","webpack://ig-ui/./src/FrmSettings/TabMouse.ts","webpack://ig-ui/./src/FrmSettings/TabKeyboard.ts","webpack://ig-ui/./src/FrmSettings/TabLanguage.ts","webpack://ig-ui/./src/FrmSettings/TabEdit.ts","webpack://ig-ui/./src/FrmSettings/TabViewer.ts","webpack://ig-ui/./src/FrmSettings/TabToolbar.ts","webpack://ig-ui/./src/FrmSettings/TabGallery.ts","webpack://ig-ui/./src/FrmSettings/TabFileAssocs.ts","webpack://ig-ui/./src/FrmSettings/TabTools.ts","webpack://ig-ui/./src/FrmSettings/TabLayout.ts","webpack://ig-ui/./src/FrmSettings/Settings.ts","webpack://ig-ui/./src/FrmSettings.ts","webpack://ig-ui/./src/helpers/webview.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ig-ui\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ig-ui\"] = factory();\n\telse\n\t\troot[\"ig-ui\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\r\nexport default class Language {\r\n  /**\r\n   * Loads language.\r\n   */\r\n  static load() {\r\n    for (const langKey in _pageSettings.lang) {\r\n      if (!Object.prototype.hasOwnProperty.call(_pageSettings.lang, langKey)) {\r\n        continue;\r\n      }\r\n  \r\n      const langValue = _pageSettings.lang[langKey];\r\n  \r\n      queryAll(`[lang-text=\"${langKey}\"]`, true).forEach(el => {\r\n        el.innerText = langValue;\r\n      });\r\n\r\n      queryAll(`[lang-title=\"${langKey}\"]`, true).forEach(el => {\r\n        el.title = langValue;\r\n      });\r\n\r\n      queryAll(`[lang-html=\"${langKey}\"]`, true).forEach(el => {\r\n        let html = langValue;\r\n\r\n        for (let i = 0; i < el.childElementCount; i++) {\r\n          html = html.replaceAll(`{${i}}`, el.children.item(i).outerHTML);\r\n        }\r\n\r\n        el.innerHTML = html;\r\n      });\r\n    }\r\n  }\r\n}\r\n","import Language from '@/FrmSettings/Language';\r\n\r\n\r\n/**\r\n * Pauses the thread for a period\r\n * @param time Duration to pause in millisecond\r\n * @param data Data to return after resuming\r\n * @returns a promise\r\n */\r\nexport const pause = <T>(time: number, data?: T): Promise<T> => new Promise((resolve) => {\r\n  setTimeout(() => resolve(data as T), time);\r\n});\r\n\r\n\r\n/**\r\n * Gets the settings that are changed by user (`_pageSettings.config`) from the input tab.\r\n */\r\nexport const getChangedSettingsFromTab = (tab: string) => {\r\n  const result: Record<string, any> = {};\r\n  const inputEls = queryAll<HTMLInputElement>(`[tab=\"${tab}\"] input[name]`);\r\n  const selectEls = queryAll<HTMLSelectElement>(`[tab=\"${tab}\"] select[name]`);\r\n  const allEls = [...inputEls, ...selectEls];\r\n\r\n  for (const el of allEls) {\r\n    const configName = el.name;\r\n    let configValue: boolean | number | string = '';\r\n    if (el.name.startsWith('_')) continue;\r\n    if (!el.checkValidity()) continue;\r\n\r\n\r\n    // bool value\r\n    if (el.type === 'checkbox') {\r\n      configValue = (el as HTMLInputElement).checked;\r\n    }\r\n    // number value\r\n    else if (el.type === 'number') {\r\n      configValue = +el.value;\r\n    }\r\n    // string value\r\n    else {\r\n      configValue = el.value;\r\n    }\r\n\r\n    if (configValue !== _pageSettings.config[configName]) {\r\n      result[configName] = configValue;\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n\r\n/**\r\n * Escapes HTML characters.\r\n */\r\nexport const escapeHtml = (html: string) => {\r\n  return html\r\n    .replace(/&/g, '&amp;') // &\r\n    .replace(/</g, '&lt;') // <\r\n    .replace(/>/g, '&gt;') // >\r\n    .replace(/\"/g, '&quot;'); // \"\r\n};\r\n\r\n\r\n/**\r\n * Opens modal dialog and return value.\r\n * @param selector Dialog selector.\r\n * @param data The data to pass to the dialog.\r\n */\r\nexport const openModalDialog = async (\r\n  selector: string,\r\n  purpose: 'create' | 'edit',\r\n  data: Record<string, any> = {},\r\n  onOpen?: (el: HTMLDialogElement) => any,\r\n  onSubmit?: (e: SubmitEvent) => any) => {\r\n  let isClosed = false;\r\n  const dialogEl = query<HTMLDialogElement>(selector);\r\n  dialogEl.classList.remove('dialog--create', 'dialog--edit');\r\n  dialogEl.classList.add(`dialog--${purpose}`);\r\n\r\n  // add shaking effect when clicking outside of dialog\r\n  dialogEl.addEventListener('click', async (e) => {\r\n    const el = e.target as HTMLDialogElement;\r\n    const rect = el.getBoundingClientRect();\r\n\r\n    // click on backdrop\r\n    if (rect.left > e.clientX\r\n      || rect.right < e.clientX\r\n      || rect.top > e.clientY\r\n      || rect.bottom < e.clientY) {\r\n      // shake the modal for 500ms\r\n      el.classList.add('ani-shaking');\r\n      await pause(500);\r\n      el.classList.remove('ani-shaking');\r\n    }\r\n  }, false);\r\n\r\n  // on close\r\n  dialogEl.addEventListener('close', () => isClosed = true, false);\r\n\r\n  // on submit\r\n  query<HTMLFormElement>(`${selector} > form`).addEventListener('submit', async (e) => {\r\n    if (onSubmit) await Promise.resolve(onSubmit(e));\r\n  });\r\n\r\n  console.log(data);\r\n  Object.keys(data).forEach(key => {\r\n    const inputEl = query<HTMLInputElement>(`${selector} [name=\"_${key}\"]`);\r\n    if (inputEl) inputEl.value = data[key];\r\n  });\r\n\r\n  // on open\r\n  if (onOpen) await Promise.resolve(onOpen(dialogEl));\r\n\r\n  // open modal dialog\r\n  dialogEl.showModal();\r\n\r\n  while (!isClosed) {\r\n    await pause(100);\r\n  }\r\n\r\n  return dialogEl;\r\n};\r\n\r\n\r\n/**\r\n * Open file picker.\r\n */\r\nexport const openFilePicker = async (options?: {\r\n  multiple?: boolean,\r\n  filter?: string,\r\n}) => {\r\n  const filePaths = await postAsync<string[]>('OpenFilePicker', options || {}, true);\r\n\r\n  return filePaths;\r\n};\r\n\r\n\r\n/**\r\n * Open hotkey picker.\r\n */\r\nexport const openHotkeyPicker = async (): Promise<string | null> => {\r\n  const hotkey = await postAsync<string>('OpenHotkeyPicker');\r\n\r\n  return hotkey;\r\n};\r\n\r\n\r\n/**\r\n * Renders hotkey list\r\n * @param ulSelector CSS selector of the list element\r\n * @param hotkeys Hotkey list to render\r\n */\r\nexport const renderHotkeyList = async (\r\n  ulSelector: string,\r\n  hotkeys: string[],\r\n  onChange?: (action: 'delete' | 'add') => any,\r\n) => {\r\n  const ulEl = query(ulSelector);\r\n  let ulHtml = '';\r\n\r\n  // load list of hotkeys\r\n  for (const key of hotkeys) {\r\n    ulHtml += `\r\n    <li class=\"hotkey-item\">\r\n      <kbd>${key}</kbd>\r\n      <button type=\"button\" class=\"btn--icon\" lang-title=\"_._Delete\" data-action=\"delete\">\r\n        ${_pageSettings.icons.Delete}\r\n      </button>\r\n    </li>`;\r\n  }\r\n\r\n  // load 'Add hotkey' button\r\n  ulHtml += `<li>\r\n    <button type=\"button\" lang-title=\"_._AddHotkey\" data-action=\"add\">[Add hotkey…]</button>\r\n  </li>`;\r\n\r\n  ulEl.innerHTML = ulHtml;\r\n  Language.load();\r\n\r\n  // add event listerner for 'Delete' hotkey\r\n  queryAll<HTMLButtonElement>(`${ulSelector} button[data-action]`).forEach(el => {\r\n    el.addEventListener('click', async () => {\r\n      const action = el.getAttribute('data-action');\r\n      const newHotkeys = queryAll(`${ulSelector} .hotkey-item > kbd`)\r\n        .map(kbdEl => kbdEl.innerText);\r\n\r\n      if (action === 'delete') {\r\n        const hotkeyItemEl = el.closest('.hotkey-item');\r\n        hotkeyItemEl?.remove();\r\n        if (onChange) await Promise.resolve(onChange(action));\r\n      }\r\n      else if (action === 'add') {\r\n        const hotkey = await openHotkeyPicker();\r\n        if (!hotkey) return;\r\n\r\n\r\n        renderHotkeyList(ulSelector, [...newHotkeys, hotkey], onChange);\r\n        if (onChange) await Promise.resolve(onChange(action));\r\n\r\n        // set focus to the 'Add hotkey' button\r\n        query<HTMLButtonElement>(`${ulSelector} button[data-action=\"add\"]`)?.focus();\r\n      }\r\n    }, false);\r\n  });\r\n};\r\n","import { pause } from '.';\r\nimport { WebviewEventHandlerFn } from './webview';\r\n\r\n\r\n/**\r\n * Gets the first matched element with the query selector.\r\n */\r\nexport const query = <T = HTMLElement>(selector: string, hideWarning = false): T | null => {\r\n  try {\r\n    const el = document.querySelector(selector) as T;\r\n\r\n    if (!el && !hideWarning) {\r\n      console.info(`⚠️ query() returns NULL with selector '${selector}'`);\r\n    }\r\n\r\n    return el;\r\n  }\r\n  catch {}\r\n\r\n  return null;\r\n};\r\n\r\n\r\n/**\r\n * Gets all matched elements with the query selector.\r\n */\r\nexport const queryAll = <T = HTMLElement>(selector: string, hideWarning = false) => {\r\n  try {\r\n    const els = Array.from(document.querySelectorAll(selector)) as T[];\r\n\r\n    if (els.length === 0 && !hideWarning) {\r\n      console.info(`⚠️ queryAll() returns ZERO elements with selector '${selector}'`);\r\n    }\r\n\r\n    return els;\r\n  }\r\n  catch {}\r\n\r\n  return [];\r\n};\r\n\r\n\r\n/**\r\n * Add event listerner from backend.\r\n * @param name Event name\r\n * @param handler Function to handle the event\r\n */\r\nexport const on = (name: string, handler: WebviewEventHandlerFn) => {\r\n  _webview.addEvent(name, handler);\r\n};\r\n\r\n\r\n/**\r\n * Send an event to backend.\r\n * @param name Event name\r\n * @param data Data to send to backend, it will be converted to JSON string.\r\n */\r\nexport const post = (name: string, data?: any, autoConvertToJson?: boolean) => {\r\n  const msgData = (autoConvertToJson ?? false) ? JSON.stringify(data) : data;\r\n\r\n  // @ts-ignore\r\n  window.chrome.webview?.postMessage({ name, data: msgData });\r\n};\r\n\r\n\r\n/**\r\n * Send an event to backend and wait for the returned data.\r\n * @param name Event name\r\n * @param data Data to send to backend, it will be converted to JSON string.\r\n */\r\nexport const postAsync = async <T = unknown>(name: string, data?: any, autoConvertToJson?: boolean) => {\r\n  let hasResult = false;\r\n  let result: T = null;\r\n\r\n  on(name, (eventName, eventData) => {\r\n    if (eventName !== name) return;\r\n\r\n    hasResult = true;\r\n    result = eventData;\r\n    _webview.removeEvent(name);\r\n  });\r\n\r\n  const msgData = (autoConvertToJson ?? false) ? JSON.stringify(data) : data;\r\n\r\n  // @ts-ignore\r\n  window.chrome.webview?.postMessage({ name, data: msgData });\r\n\r\n  // wait for the returned data\r\n  while (!hasResult) {\r\n    await pause(100);\r\n  }\r\n\r\n  return result;\r\n};\r\n","import { ITheme } from '@/@types/FrmSettings';\r\nimport { getChangedSettingsFromTab } from '@/helpers';\r\nimport Language from './Language';\r\n\r\nexport default class TabAppearance {\r\n  /**\r\n   * Loads settings for tab Appearance.\r\n   */\r\n  static loadSettings() {\r\n    TabAppearance.loadThemeList();\r\n    TabAppearance.loadThemeListStatus();\r\n    TabAppearance.handleBackgroundColorChanged();\r\n    TabAppearance.handleSlideshowBackgroundColorChanged();\r\n  }\r\n\r\n\r\n  /**\r\n   * Loads theme list check status\r\n   */\r\n  static loadThemeListStatus() {\r\n    const darkTheme = query<HTMLInputElement>('[name=\"DarkTheme\"]').value;\r\n    const lightTheme = query<HTMLInputElement>('[name=\"LightTheme\"]').value;\r\n\r\n    const darkEl = query<HTMLInputElement>(`[name=\"_DarkThemeOptions\"][value=\"${darkTheme}\"]`);\r\n    const lightEl = query<HTMLInputElement>(`[name=\"_LightThemeOptions\"][value=\"${lightTheme}\"]`);\r\n    if (darkEl) darkEl.checked = true;\r\n    if (lightEl) lightEl.checked = true;\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab Appearance.\r\n   */\r\n  static addEvents() {\r\n    query('#Lnk_ResetBackgroundColor').addEventListener('click', TabAppearance.resetBackgroundColor, false);\r\n    query('#Lnk_ResetSlideshowBackgroundColor').addEventListener('click', TabAppearance.resetSlideshowBackgroundColor, false);\r\n\r\n    query('#Btn_BackgroundColor').addEventListener('click', async () => {\r\n      const colorEL = query<HTMLInputElement>('[name=\"BackgroundColor\"]');\r\n      const colorValue = await postAsync<string>('Btn_BackgroundColor', colorEL.value);\r\n\r\n      if (colorValue) {\r\n        colorEL.value = colorValue;\r\n        TabAppearance.handleBackgroundColorChanged();\r\n      }\r\n    }, false);\r\n    query('#Btn_SlideshowBackgroundColor').addEventListener('click', async () => {\r\n      const colorEL = query<HTMLInputElement>('[name=\"SlideshowBackgroundColor\"]');\r\n      const colorValue = await postAsync<string>('Btn_SlideshowBackgroundColor', colorEL.value);\r\n\r\n      if (colorValue) {\r\n        colorEL.value = colorValue;\r\n        TabAppearance.handleSlideshowBackgroundColorChanged();\r\n      }\r\n    }, false);\r\n\r\n    query('#Btn_InstallTheme').addEventListener('click', async () => {\r\n      const newThemeList = await postAsync<ITheme[]>('Btn_InstallTheme');\r\n      TabAppearance.loadThemeList(newThemeList);\r\n    }, false);\r\n\r\n    query('#Btn_RefreshThemeList').addEventListener('click', async () => {\r\n      const newThemeList = await postAsync<ITheme[]>('Btn_RefreshThemeList');\r\n      TabAppearance.loadThemeList(newThemeList);\r\n    }, false);\r\n\r\n    query('#Btn_OpenThemeFolder').addEventListener('click', () => post('Btn_OpenThemeFolder'), false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    const settings = getChangedSettingsFromTab('appearance');\r\n\r\n    // DarkTheme\r\n    settings.DarkTheme = query<HTMLInputElement>('[name=\"DarkTheme\"]').value;\r\n    if (settings.DarkTheme === _pageSettings.config.DarkTheme) {\r\n      delete settings.DarkTheme;\r\n    }\r\n\r\n    // LightTheme\r\n    settings.LightTheme = query<HTMLInputElement>('[name=\"LightTheme\"]').value;\r\n    if (settings.LightTheme === _pageSettings.config.LightTheme) {\r\n      delete settings.LightTheme;\r\n    }\r\n\r\n    return settings;\r\n  }\r\n\r\n\r\n  /**\r\n   * Updates `_pageSettings.config.BackgroundColor` value and load UI.\r\n   */\r\n  static loadBackgroundColorConfig(hexColor: string) {\r\n    _pageSettings.config.BackgroundColor = hexColor;\r\n    query<HTMLInputElement>('[name=\"BackgroundColor\"]').value = hexColor;\r\n    TabAppearance.handleBackgroundColorChanged();\r\n  }\r\n\r\n\r\n  /**\r\n   * Loads all themes into the list.\r\n   */\r\n  private static loadThemeList(list?: ITheme[]) {\r\n    if (Array.isArray(list) && list.length > 0) {\r\n      _pageSettings.themeList = list;\r\n    }\r\n    const themeList = _pageSettings.themeList || [];\r\n\r\n    const ulEl = query<HTMLTableElement>('#List_ThemeList');\r\n    let ulHtml = '';\r\n\r\n    for (const th of themeList) {\r\n      const liHtml = `\r\n        <li>\r\n          <div class=\"theme-item\">\r\n            <div class=\"theme-preview\">\r\n              <div class=\"theme-preview-img\" title=\"${th.FolderPath}\">\r\n                <img src=\"${th.PreviewImage}\" alt=\"${th.Info.Name}\" onerror=\"this.hidden = true;\" />\r\n                <span class=\"theme-mode ${th.IsDarkMode ? 'theme-dark' : 'theme-light'}\"\r\n                  lang-title=\"FrmSettings.Tab.Appearance.${th.IsDarkMode ? '_DarkTheme' : '_LightTheme'}\">\r\n                  ${th.IsDarkMode ? '🌙' : '☀️'}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"theme-info\">\r\n              <div class=\"theme-heading\" title=\"${th.Info.Name} - v${th.Info.Version}\">\r\n                <span class=\"theme-name\">${th.Info.Name}</span>\r\n                <span class=\"theme-version\">${th.Info.Version}</span>\r\n              </div>\r\n              <div class=\"theme-description\" title=\"${th.Info.Description}\">${th.Info.Description}</div>\r\n              <div class=\"theme-author\">\r\n                <span class=\"me-4\" title=\"${th.Info.Author}\">\r\n                  <span lang-text=\"FrmSettings.Tab.Appearance._Author\">[Author]</span>:\r\n                  ${th.Info.Author || '?'}\r\n                </span>\r\n                <span class=\"me-4\" title=\"${th.Info.Website}\">\r\n                  <span lang-text=\"_._Website\">[Website]</span>:\r\n                  ${th.Info.Website || '?'}\r\n                </span>\r\n                <span title=\"${th.Info.Email}\">\r\n                  <span lang-text=\"_._Email\">[Email]</span>:\r\n                  ${th.Info.Email || '?'}\r\n                </span>\r\n              </div>\r\n              <div class=\"theme-actions\">\r\n                <label lang-title=\"FrmSettings.Tab.Appearance._UseThemeForDarkMode\">\r\n                  <input type=\"radio\" name=\"_DarkThemeOptions\" value=\"${th.FolderName}\" />\r\n                  <span>\r\n                    ${_pageSettings.icons.Moon}\r\n                    <span lang-text=\"FrmSettings.Tab.Appearance._DarkTheme\">[Dark]</span> \r\n                  </span>\r\n                </label>\r\n                <label lang-title=\"FrmSettings.Tab.Appearance._UseThemeForLightMode\">\r\n                  <input type=\"radio\" name=\"_LightThemeOptions\" value=\"${th.FolderName}\" />\r\n                  <span>\r\n                    ${_pageSettings.icons.Sun}\r\n                    <span lang-text=\"FrmSettings.Tab.Appearance._LightTheme\">[Light]</span>\r\n                  </span>\r\n                </label>\r\n\r\n                <button type=\"button\" class=\"btn--icon ms-3 px-1\"\r\n                  lang-title=\"_._Delete\"\r\n                  ${_pageSettings.defaultThemeDir === th.FolderPath ? 'style=\"visibility: hidden !important;\"' : ''}\r\n                  data-delete-theme=\"${th.FolderPath}\">\r\n                  ${_pageSettings.icons.Delete}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </li>`;\r\n\r\n      ulHtml += liHtml;\r\n    }\r\n\r\n    ulEl.innerHTML = ulHtml;\r\n    Language.load();\r\n    TabAppearance.loadThemeListStatus();\r\n\r\n    queryAll<HTMLInputElement>('[name=\"_DarkThemeOptions\"]').forEach(el => {\r\n      el.addEventListener('change', (e) => {\r\n        const themeName = (e.target as HTMLInputElement).value;\r\n        query<HTMLInputElement>('[name=\"DarkTheme\"]').value = themeName;\r\n      }, false);\r\n    });\r\n\r\n    queryAll<HTMLInputElement>('[name=\"_LightThemeOptions\"]').forEach(el => {\r\n      el.addEventListener('change', (e) => {\r\n        const themeName = (e.target as HTMLInputElement).value;\r\n        query<HTMLInputElement>('[name=\"LightTheme\"]').value = themeName;\r\n      }, false);\r\n    });\r\n\r\n    queryAll<HTMLButtonElement>('[data-delete-theme]').forEach(el => {\r\n      el.addEventListener('click', async (e) => {\r\n        const themeDir = (e.target as HTMLButtonElement).getAttribute('data-delete-theme');\r\n\r\n        const newThemeList = await postAsync<ITheme[]>('Delete_Theme_Pack', themeDir);\r\n        TabAppearance.loadThemeList(newThemeList);\r\n      }, false);\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Resets the background color to the current theme's background color.\r\n   */\r\n  private static resetBackgroundColor() {\r\n    const isDarkMode = document.documentElement.getAttribute('color-mode') !== 'light';\r\n    const currentThemeName = isDarkMode ? _pageSettings.config.DarkTheme : _pageSettings.config.LightTheme;\r\n    const theme = _pageSettings.themeList.find(i => i.FolderName === currentThemeName);\r\n    if (!theme) return;\r\n\r\n    const colorHex = theme.BgColor || '#00000000';\r\n\r\n    query<HTMLInputElement>('[name=\"BackgroundColor\"]').value = colorHex;\r\n    TabAppearance.handleBackgroundColorChanged();\r\n  }\r\n\r\n\r\n  /**\r\n   * Reset slideshow background color to black\r\n   */\r\n  private static resetSlideshowBackgroundColor() {\r\n    query<HTMLInputElement>('[name=\"SlideshowBackgroundColor\"]').value = '#000000';\r\n    TabAppearance.handleSlideshowBackgroundColorChanged();\r\n  }\r\n\r\n\r\n  /**\r\n   * Handles when `BackgroundColor` is changed.\r\n   */\r\n  private static handleBackgroundColorChanged() {\r\n    const colorHex = query<HTMLInputElement>('[name=\"BackgroundColor\"]').value;\r\n    if (!colorHex) return;\r\n\r\n    query<HTMLInputElement>('#Btn_BackgroundColor > .color-display').style.setProperty('--color-picker-value', colorHex);\r\n    query('#Lbl_BackgroundColorValue').innerText = colorHex;\r\n  }\r\n\r\n\r\n  /**\r\n   * Handles when `SlideshowBackgroundColor` is changed.\r\n   */\r\n  private static handleSlideshowBackgroundColorChanged() {\r\n    const colorHex = query<HTMLInputElement>('[name=\"SlideshowBackgroundColor\"]').value;\r\n    if (!colorHex) return;\r\n\r\n    query<HTMLInputElement>('#Btn_SlideshowBackgroundColor > .color-display').style.setProperty('--color-picker-value', colorHex);\r\n    query('#Lbl_SlideshowBackgroundColorValue').innerText = colorHex;\r\n  }\r\n}\r\n","import TabAppearance from './TabAppearance';\r\n\r\nexport default class Sidebar {\r\n  /**\r\n   * Adds click events to sidebar menu.\r\n   */\r\n  static addEvents() {\r\n    // navigation bar event\r\n    const navItems = Array.from(document.querySelectorAll('input[name=\"nav\"]'));\r\n    for (let i = 0; i < navItems.length; i++) {\r\n      const itemEl = navItems[i] as HTMLInputElement;\r\n\r\n      itemEl.addEventListener('change', (e) => {\r\n        const activeTabName = (e.target as HTMLInputElement).value;\r\n        Sidebar.setActiveMenu(activeTabName);\r\n      }, false);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Set the active menu for sidebar\r\n   */\r\n  static setActiveMenu(tabPageName: string) {\r\n    tabPageName ||= 'general';\r\n\r\n    const tabPageEl = query(`.tab-page[tab=\"${tabPageName}\"]`);\r\n    if (!tabPageEl) return;\r\n\r\n    // hide all tabs\r\n    const allTabPages = queryAll('.tab-page');\r\n    allTabPages.forEach(el => el.classList.remove('active'));\r\n\r\n    // show the selected tab\r\n    tabPageEl.classList.add('active');\r\n\r\n    // select the active nav item\r\n    const allNavItems = queryAll('input[type=\"radio\"]');\r\n    allNavItems.forEach((item: HTMLInputElement) => item.checked = false);\r\n    const navItem = query(`input[type=\"radio\"][value=\"${tabPageName}\"]`) as HTMLInputElement;\r\n    if (navItem) navItem.checked = true;\r\n\r\n    if (tabPageName === 'appearance') {\r\n      TabAppearance.loadThemeListStatus();\r\n    }\r\n\r\n    // update backend tab name\r\n    post('Sidebar_Changed', tabPageName);\r\n  }\r\n\r\n}\r\n","import { getChangedSettingsFromTab } from '@/helpers';\r\n\r\nexport default class TabGeneral {\r\n  private static get isOriginalAutoUpdateEnabled() {\r\n    return _pageSettings.config.AutoUpdate !== '0';\r\n  }\r\n\r\n  /**\r\n   * Loads settings for tab General.\r\n   */\r\n  static loadSettings() {\r\n    query('#Lnk_StartupDir').title = _pageSettings.startUpDir || '(unknown)';\r\n    query('#Lnk_ConfigDir').title = _pageSettings.configDir || '(unknown)';\r\n    query('#Lnk_UserConfigFile').title = _pageSettings.userConfigFilePath || '(unknown)';\r\n\r\n    // AutoUpdate is a string\r\n    query<HTMLInputElement>('[name=\"AutoUpdate\"]').checked = TabGeneral.isOriginalAutoUpdateEnabled;\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab General.\r\n   */\r\n  static addEvents() {\r\n    query('#Lnk_StartupDir').addEventListener('click', () => post('Lnk_StartupDir', _pageSettings.startUpDir), false);\r\n    query('#Lnk_ConfigDir').addEventListener('click', () => post('Lnk_ConfigDir', _pageSettings.configDir), false);\r\n    query('#Lnk_UserConfigFile').addEventListener('click', () => post('Lnk_UserConfigFile', _pageSettings.userConfigFilePath), false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    const settings = getChangedSettingsFromTab('general');\r\n\r\n    // convert AutoUpdate back to string\r\n    const isNewAutoUpdateEnabled = settings.AutoUpdate === true;\r\n    if (isNewAutoUpdateEnabled !== TabGeneral.isOriginalAutoUpdateEnabled) {\r\n      settings.AutoUpdate = settings.AutoUpdate\r\n        ? new Date().toISOString()\r\n        : '0';\r\n    }\r\n    else {\r\n      delete settings.AutoUpdate;\r\n    }\r\n\r\n    return settings;\r\n  }\r\n}\r\n","import { getChangedSettingsFromTab } from '@/helpers';\r\n\r\nexport default class TabImage {\r\n  /**\r\n   * Loads settings for tab Image.\r\n   */\r\n  static loadSettings() {\r\n    const colorProfile = (_pageSettings.config.ColorProfile as string || '');\r\n    if (colorProfile.includes('.')) {\r\n      query<HTMLSelectElement>('[name=\"ColorProfile\"]').value = 'Custom';\r\n      query('#Lnk_CustomColorProfile').innerText = colorProfile;\r\n    }\r\n\r\n    TabImage.handleColorProfileChanged();\r\n    TabImage.handleUseEmbeddedThumbnailOptionsChanged();\r\n  }\r\n\r\n\r\n  /**\r\n   * Add events for tab Image.\r\n   */\r\n  static addEvents() {\r\n    query('#Btn_BrowseColorProfile').addEventListener('click', async () => {\r\n      const profileFilePath = await postAsync<string>('Btn_BrowseColorProfile');\r\n      query('#Lnk_CustomColorProfile').innerText = profileFilePath;\r\n    }, false);\r\n  \r\n    query('#Lnk_CustomColorProfile').addEventListener('click', () => {\r\n      const profileFilePath = query('#Lnk_CustomColorProfile').innerText.trim();\r\n      post('Lnk_CustomColorProfile', profileFilePath);\r\n    }, false);\r\n  \r\n    query('[name=\"ColorProfile\"]').addEventListener('change', TabImage.handleColorProfileChanged, false);\r\n\r\n    query('[name=\"UseEmbeddedThumbnailRawFormats\"]').addEventListener('input', TabImage.handleUseEmbeddedThumbnailOptionsChanged, false);\r\n    query('[name=\"UseEmbeddedThumbnailOtherFormats\"]').addEventListener('input', TabImage.handleUseEmbeddedThumbnailOptionsChanged, false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    const settings = getChangedSettingsFromTab('image');\r\n\r\n    // ImageBoosterCacheCount\r\n    settings.ImageBoosterCacheCount = +(settings.ImageBoosterCacheCount || 0);\r\n    if (settings.ImageBoosterCacheCount === _pageSettings.config.ImageBoosterCacheCount) {\r\n      delete settings.ImageBoosterCacheCount;\r\n    }\r\n\r\n\r\n    // ColorProfile\r\n    const originalColorProfile = _pageSettings.config.ColorProfile;\r\n    if (settings.ColorProfile === 'Custom') {\r\n      settings.ColorProfile = query('#Lnk_CustomColorProfile').innerText.trim();\r\n    }\r\n    if (!settings.ColorProfile || settings.ColorProfile === originalColorProfile) {\r\n      delete settings.ColorProfile;\r\n    }\r\n\r\n    return settings;\r\n  }\r\n\r\n\r\n  /**\r\n   * Handles when color profile option is changed.\r\n   */\r\n  static handleColorProfileChanged() {\r\n    const selectEl = query<HTMLSelectElement>('[name=\"ColorProfile\"]');\r\n    const useCustomProfile = selectEl.value === 'Custom';\r\n  \r\n    query('#Btn_BrowseColorProfile').hidden = !useCustomProfile;\r\n    query('#Section_CustomColorProfile').hidden = !useCustomProfile;\r\n  }\r\n\r\n\r\n  /**\r\n   * Handle when the embedded thumbnail options are changed.\r\n   */\r\n  static handleUseEmbeddedThumbnailOptionsChanged() {\r\n    const enableForRaw = query<HTMLInputElement>('[name=\"UseEmbeddedThumbnailRawFormats\"]').checked;\r\n    const enableForOthers = query<HTMLInputElement>('[name=\"UseEmbeddedThumbnailOtherFormats\"]').checked;\r\n    const showSizeSection = enableForRaw || enableForOthers;\r\n  \r\n    query('#Section_EmbeddedThumbnailSize').hidden = !showSizeSection;\r\n  }\r\n}\r\n","import { getChangedSettingsFromTab } from '@/helpers';\r\n\r\nexport default class TabSlideshow {\r\n  /**\r\n   * Loads settings for tab Slideshow.\r\n   */\r\n  static loadSettings() {\r\n    TabSlideshow.handleUseRandomIntervalForSlideshowChanged();\r\n    TabSlideshow.handleSlideshowIntervalsChanged();\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab Slideshow.\r\n   */\r\n  static addEvents() {\r\n    query('[name=\"UseRandomIntervalForSlideshow\"]').addEventListener('input', TabSlideshow.handleUseRandomIntervalForSlideshowChanged, false);\r\n    query('[name=\"SlideshowInterval\"]').addEventListener('input', TabSlideshow.handleSlideshowIntervalsChanged, false);\r\n    query('[name=\"SlideshowIntervalTo\"]').addEventListener('input', TabSlideshow.handleSlideshowIntervalsChanged, false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    return getChangedSettingsFromTab('slideshow');\r\n  }\r\n\r\n\r\n  /**\r\n   * Handle when slideshow intervals are changed.\r\n   */\r\n  private static handleSlideshowIntervalsChanged() {\r\n    const fromEl = query<HTMLInputElement>('[name=\"SlideshowInterval\"]');\r\n    const toEl = query<HTMLInputElement>('[name=\"SlideshowIntervalTo\"]');\r\n\r\n    fromEl.max = toEl.value;\r\n    toEl.min = fromEl.value;\r\n\r\n    const intervalFrom = +fromEl.value || 5;\r\n    const intervalTo = +toEl.value || 5;\r\n    const intervalFromText = TabSlideshow.toTimeString(intervalFrom);\r\n    const intervalToText = TabSlideshow.toTimeString(intervalTo);\r\n\r\n    const useRandomInterval = query<HTMLInputElement>('[name=\"UseRandomIntervalForSlideshow\"]').checked;\r\n\r\n    if (useRandomInterval) {\r\n      query('#Lbl_SlideshowInterval').innerText = `${intervalFromText} - ${intervalToText}`;\r\n    }\r\n    else {\r\n      query('#Lbl_SlideshowInterval').innerText = intervalFromText;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * handle when `UseRandomIntervalForSlideshow` is changed.\r\n   */\r\n  private static handleUseRandomIntervalForSlideshowChanged() {\r\n    const useRandomInterval = query<HTMLInputElement>('[name=\"UseRandomIntervalForSlideshow\"]').checked;\r\n  \r\n    query('#Lbl_SlideshowIntervalFrom').hidden = !useRandomInterval;\r\n    query('#Section_SlideshowIntervalTo').hidden = !useRandomInterval;\r\n  }\r\n\r\n\r\n  /**\r\n   * Formats total seconds to time format: `mm:ss.fff`.\r\n   */\r\n  private static toTimeString(totalSeconds: number) {\r\n    const dt = new Date(totalSeconds * 1000);\r\n    let minutes = dt.getUTCMinutes().toString();\r\n    let seconds = dt.getUTCSeconds().toString();\r\n    const msSeconds = dt.getUTCMilliseconds().toString();\r\n\r\n    if (minutes.length < 2) minutes = `0${minutes}`;\r\n    if (seconds.length < 2) seconds = `0${seconds}`;\r\n\r\n    return `${minutes}:${seconds}.${msSeconds}`;\r\n  }\r\n}\r\n","import { getChangedSettingsFromTab } from '@/helpers';\r\n\r\nexport default class TabMouse {\r\n  /**\r\n   * Loads settings for tab Mouse.\r\n   */\r\n  static loadSettings() {\r\n    query<HTMLSelectElement>('#Cmb_MouseWheel_Scroll').value = _pageSettings.config.MouseWheelActions?.Scroll || 'DoNothing';\r\n    query<HTMLSelectElement>('#Cmb_MouseWheel_CtrlAndScroll').value = _pageSettings.config.MouseWheelActions?.CtrlAndScroll || 'DoNothing';\r\n    query<HTMLSelectElement>('#Cmb_MouseWheel_ShiftAndScroll').value = _pageSettings.config.MouseWheelActions?.ShiftAndScroll || 'DoNothing';\r\n    query<HTMLSelectElement>('#Cmb_MouseWheel_AltAndScroll').value = _pageSettings.config.MouseWheelActions?.AltAndScroll || 'DoNothing';\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab Mouse.\r\n   */\r\n  static addEvents() {\r\n    query('#Btn_ResetMouseWheelAction').addEventListener('click', TabMouse.resetDefaultMouseWheelActions, false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    const settings = getChangedSettingsFromTab('mouse');\r\n\r\n    // MouseWheelActions\r\n    const newWheelScrollValue = query<HTMLSelectElement>('#Cmb_MouseWheel_Scroll').value;\r\n    const newWheelCtrlAndScrollValue = query<HTMLSelectElement>('#Cmb_MouseWheel_CtrlAndScroll').value;\r\n    const newWheelShiftAndScrollValue = query<HTMLSelectElement>('#Cmb_MouseWheel_ShiftAndScroll').value;\r\n    const newWheelAltAndScrollValue = query<HTMLSelectElement>('#Cmb_MouseWheel_AltAndScroll').value;\r\n\r\n    const mouseWheelActions: Record<string, string> = {};\r\n    if (newWheelScrollValue !== _pageSettings.config.MouseWheelActions?.Scroll) {\r\n      mouseWheelActions.Scroll = newWheelScrollValue;\r\n    }\r\n    if (newWheelCtrlAndScrollValue !== _pageSettings.config.MouseWheelActions?.CtrlAndScroll) {\r\n      mouseWheelActions.CtrlAndScroll = newWheelCtrlAndScrollValue;\r\n    }\r\n    if (newWheelShiftAndScrollValue !== _pageSettings.config.MouseWheelActions?.ShiftAndScroll) {\r\n      mouseWheelActions.ShiftAndScroll = newWheelShiftAndScrollValue;\r\n    }\r\n    if (newWheelAltAndScrollValue !== _pageSettings.config.MouseWheelActions?.AltAndScroll) {\r\n      mouseWheelActions.AltAndScroll = newWheelAltAndScrollValue;\r\n    }\r\n\r\n    if (Object.keys(mouseWheelActions).length > 0) {\r\n      settings.MouseWheelActions = mouseWheelActions;\r\n    }\r\n    else {\r\n      delete settings.MouseWheelActions;\r\n    }\r\n\r\n    return settings;\r\n  }\r\n\r\n\r\n  /**\r\n   * Resets the mouse wheel actions to the default settings.\r\n   */\r\n  private static resetDefaultMouseWheelActions() {\r\n    query<HTMLSelectElement>('#Cmb_MouseWheel_Scroll').value = 'Zoom';\r\n    query<HTMLSelectElement>('#Cmb_MouseWheel_CtrlAndScroll').value = 'PanVertically';\r\n    query<HTMLSelectElement>('#Cmb_MouseWheel_ShiftAndScroll').value = 'PanHorizontally';\r\n    query<HTMLSelectElement>('#Cmb_MouseWheel_AltAndScroll').value = 'BrowseImages';\r\n  }\r\n}\r\n","import { getChangedSettingsFromTab } from '@/helpers';\r\n\r\nexport default class TabKeyboard {\r\n  /**\r\n   * Loads settings for tab Keyboard.\r\n   */\r\n  static loadSettings() {\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab Keyboard.\r\n   */\r\n  static addEvents() {\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    return getChangedSettingsFromTab('keyboard');\r\n  }\r\n}\r\n","import { ILanguage } from '@/@types/FrmSettings';\r\nimport { getChangedSettingsFromTab } from '@/helpers';\r\n\r\nexport default class TabLanguage {\r\n  /**\r\n   * Loads settings for tab Language.\r\n   */\r\n  static loadSettings() {\r\n    TabLanguage.handleLanguageChanged();\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab Language.\r\n   */\r\n  static addEvents() {\r\n    query('#Cmb_LanguageList').removeEventListener('change', TabLanguage.handleLanguageChanged, false);\r\n    query('#Btn_RefreshLanguageList').removeEventListener('click', TabLanguage.onBtn_RefreshLanguageList, false);\r\n    query('#Lnk_InstallLanguage').removeEventListener('click', TabLanguage.onLnk_InstallLanguage, false);\r\n\r\n    query('#Cmb_LanguageList').addEventListener('change', TabLanguage.handleLanguageChanged, false);\r\n    query('#Btn_RefreshLanguageList').addEventListener('click', TabLanguage.onBtn_RefreshLanguageList, false);\r\n    query('#Lnk_InstallLanguage').addEventListener('click', TabLanguage.onLnk_InstallLanguage, false);\r\n  }\r\n\r\n\r\n  private static async onBtn_RefreshLanguageList() {\r\n    const newLangList = await postAsync<ILanguage[]>('Btn_RefreshLanguageList');\r\n    TabLanguage.loadLanguageList(newLangList);\r\n  }\r\n\r\n\r\n  private static async onLnk_InstallLanguage() {\r\n    const newLangList = await postAsync<ILanguage[]>('Lnk_InstallLanguage');\r\n    TabLanguage.loadLanguageList(newLangList);\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    return getChangedSettingsFromTab('language');\r\n  }\r\n\r\n\r\n  /**\r\n   * Handles when language is changed.\r\n   */\r\n  private static handleLanguageChanged() {\r\n    const langFileName = query<HTMLSelectElement>('#Cmb_LanguageList').value;\r\n    const lang = _pageSettings.langList.find(i => i.FileName === langFileName);\r\n    if (!lang) return;\r\n  \r\n    query('#Section_LanguageContributors').innerText = lang.Metadata.Author;\r\n  }\r\n\r\n\r\n  /**\r\n   * Loads language list to select box.\r\n   * @param list If defined, it overrides `_pageSettings.langList`.\r\n   */\r\n  static loadLanguageList(list?: ILanguage[]) {\r\n    const selectEl = query<HTMLSelectElement>('#Cmb_LanguageList');\r\n\r\n    // clear current list\r\n    while (selectEl.options.length) selectEl.remove(0);\r\n\r\n    if (Array.isArray(list) && list.length > 0) {\r\n      _pageSettings.langList = list;\r\n    }\r\n\r\n    _pageSettings.langList.forEach(lang => {\r\n      let displayText = `${lang.Metadata.LocalName} (${lang.Metadata.EnglishName})`;\r\n      if (!lang.FileName || lang.FileName.length === 0) {\r\n        displayText = lang.Metadata.EnglishName;\r\n      }\r\n\r\n      const optionEl = new Option(displayText, lang.FileName);\r\n      selectEl.add(optionEl);\r\n    });\r\n\r\n    selectEl.value = _pageSettings.config.Language;\r\n    TabLanguage.handleLanguageChanged();\r\n  }\r\n}\r\n","import { getChangedSettingsFromTab } from '@/helpers';\r\n\r\nexport default class TabEdit {\r\n  /**\r\n   * Loads settings for tab Edit.\r\n   */\r\n  static loadSettings() {\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab Edit.\r\n   */\r\n  static addEvents() {\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    return getChangedSettingsFromTab('edit');\r\n  }\r\n}\r\n","import { getChangedSettingsFromTab } from '@/helpers';\r\n\r\nexport default class TabViewer {\r\n  /**\r\n   * Loads settings for tab Viewer.\r\n   */\r\n  static loadSettings() {\r\n    const zoomLevels = _pageSettings.config.ZoomLevels as number[] || [];\r\n    query<HTMLTextAreaElement>('[name=\"ZoomLevels\"]').value = zoomLevels.join('; ');\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab Viewer.\r\n   */\r\n  static addEvents() {\r\n    query('[name=\"ZoomLevels\"]').addEventListener('input', TabViewer.handleZoomLevelsChanged, false);\r\n    query('[name=\"ZoomLevels\"]').addEventListener('blur', TabViewer.handleZoomLevelsBlur, false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    const settings = getChangedSettingsFromTab('viewer');\r\n\r\n    // ZoomLevels\r\n    settings.ZoomLevels = TabViewer.getZoomLevels();\r\n\r\n    if (query<HTMLTextAreaElement>('[name=\"ZoomLevels\"]').checkValidity()) {\r\n      const originalLevelsString = _pageSettings.config.ZoomLevels?.toString();\r\n      const newLevelsString = settings.ZoomLevels?.toString();\r\n\r\n      if (newLevelsString === originalLevelsString) {\r\n        delete settings.ZoomLevels;\r\n      }\r\n    }\r\n    else {\r\n      delete settings.ZoomLevels;\r\n    }\r\n\r\n    return settings;\r\n  }\r\n\r\n\r\n  /**\r\n   * Handle when ZoomLevels is changed.\r\n   */\r\n  private static handleZoomLevelsChanged() {\r\n    const el = query<HTMLTextAreaElement>('[name=\"ZoomLevels\"]');\r\n    const levels = TabViewer.getZoomLevels();\r\n\r\n    // validate\r\n    if (levels.some(i => !Number.isFinite(i))) {\r\n      el.setCustomValidity('Value contains invalid characters. Only number, semi-colon are allowed.');\r\n    }\r\n    else {\r\n      el.setCustomValidity('');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Handle when the ZoomLevels box is blur.\r\n   */\r\n  private static handleZoomLevelsBlur() {\r\n    const el = query<HTMLTextAreaElement>('[name=\"ZoomLevels\"]');\r\n    if (!el.checkValidity()) return;\r\n\r\n    el.value = TabViewer.getZoomLevels().join('; ');\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets zoom levels\r\n   */\r\n  private static getZoomLevels() {\r\n    const el = query<HTMLTextAreaElement>('[name=\"ZoomLevels\"]');\r\n    const levels = el.value.split(';').map(i => i.trim()).filter(Boolean)\r\n      .map(i => parseFloat(i));\r\n\r\n    return levels;\r\n  }\r\n}\r\n","import { getChangedSettingsFromTab } from '@/helpers';\r\n\r\nexport default class TabToolbar {\r\n  /**\r\n   * Loads settings for tab Toolbar.\r\n   */\r\n  static loadSettings() {\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab Toolbar.\r\n   */\r\n  static addEvents() {\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    return getChangedSettingsFromTab('toolbar');\r\n  }\r\n}\r\n","import { getChangedSettingsFromTab } from '@/helpers';\r\n\r\nexport default class TabGallery {\r\n  /**\r\n   * Loads settings for tab Gallery.\r\n   */\r\n  static loadSettings() {\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab Gallery.\r\n   */\r\n  static addEvents() {\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    return getChangedSettingsFromTab('gallery');\r\n  }\r\n}\r\n","import { getChangedSettingsFromTab } from '@/helpers';\r\n\r\nexport default class TabFileAssocs {\r\n  /**\r\n   * Loads settings for tab FileAssocs.\r\n   */\r\n  static loadSettings() {\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab FileAssocs.\r\n   */\r\n  static addEvents() {\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    return getChangedSettingsFromTab('file_assocs');\r\n  }\r\n}\r\n","import { ITool } from '@/@types/FrmSettings';\r\nimport {\r\n  escapeHtml,\r\n  getChangedSettingsFromTab,\r\n  openFilePicker,\r\n  openModalDialog,\r\n  renderHotkeyList,\r\n} from '@/helpers';\r\nimport Language from './Language';\r\n\r\n\r\nexport default class TabTools {\r\n  private static HOTKEY_SEPARATOR = '#';\r\n\r\n  /**\r\n   * Loads settings for tab Tools.\r\n   */\r\n  static loadSettings() {\r\n    TabTools.loadToolList();\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab Tools.\r\n   */\r\n  static addEvents() {\r\n    query('#Btn_AddTool').addEventListener('click', async () => {\r\n      const defaultTool = {\r\n        ToolId: '',\r\n        ToolName: '',\r\n        Executable: '',\r\n        Arguments: _pageSettings.FILE_MACRO,\r\n        Hotkeys: [],\r\n        IsIntegrated: false,\r\n      } as ITool;\r\n\r\n      await openModalDialog('#Dialog_AddOrEditTool', 'create', defaultTool, async () => {\r\n        TabTools.addEventsForToolDialog();\r\n        TabTools.updateToolCommandPreview();\r\n\r\n        await renderHotkeyList('#Dialog_AddOrEditTool .hotkey-list', defaultTool.Hotkeys);\r\n      });\r\n\r\n      const tool = TabTools.getToolDialogFormData();\r\n      TabTools.setToolItemToList(tool.ToolId, tool);\r\n    }, false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    const settings = getChangedSettingsFromTab('tools');\r\n    const originalToolListJson = JSON.stringify(_pageSettings.toolList || []);\r\n\r\n    settings.Tools = TabTools.getToolListFromDom();\r\n    const newToolListJson = JSON.stringify(settings.Tools);\r\n\r\n    if (newToolListJson === originalToolListJson) {\r\n      delete settings.Tools;\r\n    }\r\n\r\n    return settings;\r\n  }\r\n\r\n\r\n  /**\r\n   * Loads tool list but do not update `_pageSettings.toolList`.\r\n   */\r\n  private static loadToolList(list?: ITool[]) {\r\n    const toolList: ITool[] = list ?? _pageSettings.toolList ?? [];\r\n\r\n    const tbodyEl = query<HTMLTableElement>('#Table_ToolList > tbody');\r\n    let tbodyHtml = '';\r\n    const btnDeleteHtml = `\r\n      <button type=\"button\" class=\"btn--icon px-1 ms-1\" lang-title=\"_._Delete\" data-action=\"delete\">\r\n        ${_pageSettings.icons.Delete}\r\n      </button>\r\n    `;\r\n\r\n    for (const item of toolList) {\r\n      let args = '<i lang-text=\"_._Empty\"></i>';\r\n      if (item.Arguments) {\r\n        args = `<code>${escapeHtml(item.Arguments)}</code>`;\r\n      }\r\n\r\n      const hotkeysHtml = (item.Hotkeys || [])\r\n        .map((key, index) => {\r\n          const margin = index === 0 ? '' : 'ms-1';\r\n          return `<kbd class=\"${margin}\">${key}</kbd>`;\r\n        }).join('');\r\n\r\n      const chkIntegratedHtml = `\r\n        <label class=\"ig-checkbox\">\r\n          <input type=\"checkbox\" disabled ${item.IsIntegrated === true ? 'checked' : ''} />\r\n          <div></div>\r\n        </label>\r\n      `;\r\n\r\n      const trHtml = `\r\n        <tr data-tool-id=\"${item.ToolId}\"\r\n          data-tool-name=\"${item.ToolName}\"\r\n          data-tool-integrated=\"${item.IsIntegrated}\"\r\n          data-tool-executable=\"${item.Executable}\"\r\n          data-tool-arguments=\"${item.Arguments}\"\r\n          data-tool-hotkeys=\"${(item.Hotkeys || []).join(TabTools.HOTKEY_SEPARATOR)}\">\r\n          <td class=\"cell-counter\"></td>\r\n          <td class=\"cell-sticky text-nowrap\">${item.ToolId}</td>\r\n          <td class=\"text-nowrap\">${item.ToolName}</td>\r\n          <td class=\"text-center\">${chkIntegratedHtml}</td>\r\n          <td class=\"text-nowrap\">${hotkeysHtml}</td>\r\n          <td class=\"text-nowrap\">\r\n            <code>${escapeHtml(item.Executable)}</code>\r\n          </td>\r\n          <td class=\"text-nowrap\" style=\"--cell-border-right-color: transparent;\">${args}</td>\r\n          <td class=\"cell-sticky-right text-nowrap\" width=\"1\" style=\"border-left: 0;\">\r\n            <button type=\"button\" class=\"btn--icon px-1\" lang-title=\"_._Edit\" data-action=\"edit\">\r\n              ${_pageSettings.icons.Edit}\r\n            </button>\r\n            ${item.ToolId !== 'Tool_ExifGlass' ? btnDeleteHtml : ''}\r\n          </td>\r\n        </tr>\r\n      `;\r\n\r\n      tbodyHtml += trHtml;\r\n    }\r\n\r\n    tbodyEl.innerHTML = tbodyHtml;\r\n    Language.load();\r\n\r\n    queryAll<HTMLButtonElement>('#Table_ToolList button[data-action]').forEach(el => {\r\n      el.addEventListener('click', async () => {\r\n        const action = el.getAttribute('data-action');\r\n        const trEl = el.closest('tr');\r\n        const toolId = trEl.getAttribute('data-tool-id');\r\n\r\n        if (action === 'delete') {\r\n          trEl.remove();\r\n        }\r\n        else if (action === 'edit') {\r\n          await TabTools.editTool(toolId);\r\n          el.focus();\r\n        }\r\n      }, false);\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets tool list from DOM.\r\n   */\r\n  private static getToolListFromDom() {\r\n    const trEls = queryAll<HTMLTableRowElement>('#Table_ToolList > tbody > tr');\r\n    const toolList = trEls.map(el => {\r\n      const toolId = el.getAttribute('data-tool-id') ?? '';\r\n      const toolName = el.getAttribute('data-tool-name') ?? '';\r\n      const toolIntegrated = el.getAttribute('data-tool-integrated') === 'true';\r\n      const toolExecutable = el.getAttribute('data-tool-executable') ?? '';\r\n      const toolArguments = el.getAttribute('data-tool-arguments') ?? '';\r\n\r\n      const hotkeysStr = el.getAttribute('data-tool-hotkeys') ?? '';\r\n      const toolHotkeys = hotkeysStr.split(TabTools.HOTKEY_SEPARATOR).filter(Boolean);\r\n\r\n      return {\r\n        ToolId: toolId,\r\n        ToolName: toolName,\r\n        IsIntegrated: toolIntegrated,\r\n        Executable: toolExecutable,\r\n        Arguments: toolArguments,\r\n        Hotkeys: toolHotkeys,\r\n      } as ITool;\r\n    });\r\n\r\n    return toolList;\r\n  }\r\n\r\n\r\n  /**\r\n   * Open modal dialog to edit the tool.\r\n   * @param toolId Tool id\r\n   */\r\n  private static async editTool(toolId: string) {\r\n    const trEl = query<HTMLTableRowElement>(`#Table_ToolList tr[data-tool-id=\"${toolId}\"]`);\r\n\r\n    const hotkeysStr = trEl.getAttribute('data-tool-hotkeys') || '';\r\n    const toolHotkeys = hotkeysStr.split(TabTools.HOTKEY_SEPARATOR).filter(Boolean);\r\n\r\n    let tool: ITool = {\r\n      ToolId: toolId,\r\n      ToolName: trEl.getAttribute('data-tool-name') || '',\r\n      Executable: trEl.getAttribute('data-tool-executable') || '',\r\n      Arguments: trEl.getAttribute('data-tool-arguments') || '',\r\n      IsIntegrated: trEl.getAttribute('data-tool-integrated') === 'true',\r\n      Hotkeys: toolHotkeys,\r\n    };\r\n\r\n    // open dialog\r\n    await openModalDialog('#Dialog_AddOrEditTool', 'edit', tool, async () => {\r\n      query<HTMLInputElement>('[name=\"_IsIntegrated\"]').checked = tool.IsIntegrated ?? false;\r\n      TabTools.addEventsForToolDialog();\r\n      TabTools.updateToolCommandPreview();\r\n\r\n      await renderHotkeyList('#Dialog_AddOrEditTool .hotkey-list', tool.Hotkeys);\r\n    });\r\n\r\n    tool = TabTools.getToolDialogFormData();\r\n    TabTools.setToolItemToList(toolId, tool);\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets tool data from the modal dialog.\r\n   */\r\n  private static getToolDialogFormData() {\r\n    // get data\r\n    const tool: ITool = {\r\n      ToolId: query<HTMLInputElement>('#Dialog_AddOrEditTool [name=\"_ToolId\"]').value.trim(),\r\n      ToolName: query<HTMLInputElement>('#Dialog_AddOrEditTool [name=\"_ToolName\"]').value.trim(),\r\n      Executable: query<HTMLInputElement>('#Dialog_AddOrEditTool [name=\"_Executable\"]').value.trim(),\r\n      Arguments: query<HTMLInputElement>('#Dialog_AddOrEditTool [name=\"_Arguments\"]').value.trim(),\r\n      Hotkeys: queryAll('#Dialog_AddOrEditTool .hotkey-list > .hotkey-item > kbd').map(el => el.innerText),\r\n      IsIntegrated: query<HTMLInputElement>('#Dialog_AddOrEditTool [name=\"_IsIntegrated\"]').checked,\r\n    };\r\n\r\n    return tool;\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the tool item to the list.\r\n   * @param oldToolId If not found, the tool will be inserted into the list.\r\n   */\r\n  private static setToolItemToList(oldToolId: string, tool: ITool) {\r\n    if (!tool.ToolId || !tool.ToolName || !tool.Executable) return;\r\n    const toolList = TabTools.getToolListFromDom();\r\n    const toolIndex = toolList.findIndex(i => i.ToolId === oldToolId);\r\n\r\n    // edit\r\n    if (toolIndex !== -1) {\r\n      toolList[toolIndex] = tool;\r\n    }\r\n    // create\r\n    else {\r\n      toolList.push(tool);\r\n    }\r\n\r\n    TabTools.loadToolList(toolList);\r\n  }\r\n\r\n\r\n  private static addEventsForToolDialog() {\r\n    query('[name=\"_Executable\"]').removeEventListener('input', TabTools.updateToolCommandPreview, false);\r\n    query('[name=\"_Executable\"]').addEventListener('input', TabTools.updateToolCommandPreview, false);\r\n\r\n    query('[name=\"_Arguments\"]').removeEventListener('input', TabTools.updateToolCommandPreview, false);\r\n    query('[name=\"_Arguments\"]').addEventListener('input', TabTools.updateToolCommandPreview, false);\r\n\r\n    query('#btnBrowseTool').removeEventListener('click', TabTools.handleBtnBrowseToolClickEvent, false);\r\n    query('#btnBrowseTool').addEventListener('click', TabTools.handleBtnBrowseToolClickEvent, false);\r\n  }\r\n\r\n\r\n  private static updateToolCommandPreview() {\r\n    let executable = query<HTMLInputElement>('[name=\"_Executable\"]').value || '';\r\n    executable = executable.trim();\r\n\r\n    let args = query<HTMLInputElement>('[name=\"_Arguments\"]').value || '';\r\n    args = args.trim().replaceAll('<file>', '\"C:\\\\fake dir\\\\photo.jpg\"');\r\n\r\n    query('#Tool_CommandPreview').innerText = [executable, args].filter(Boolean).join(' ');\r\n  }\r\n\r\n\r\n  private static async handleBtnBrowseToolClickEvent() {\r\n    const filePaths = await openFilePicker() ?? [];\r\n    if (!filePaths.length) return;\r\n\r\n    query<HTMLInputElement>('[name=\"_Executable\"]').value = `\"${filePaths[0]}\"`;\r\n    TabTools.updateToolCommandPreview();\r\n  }\r\n\r\n}\r\n","import { getChangedSettingsFromTab } from '@/helpers';\r\nimport Language from './Language';\r\n\r\ntype LayoutControlName = 'Toolbar' | 'ToolbarContext' | 'Gallery';\r\ntype ILayoutObject = Record<LayoutControlName, {\r\n  position: string,\r\n  order: string,\r\n}>;\r\n\r\nexport default class TabLayout {\r\n  private static get defaultLayout(): ILayoutObject {\r\n    return {\r\n      Toolbar:        { position: 'Top',    order: '0' },\r\n      ToolbarContext: { position: 'Bottom', order: '1' },\r\n      Gallery:        { position: 'Bottom', order: '0' },\r\n    };\r\n  }\r\n\r\n\r\n  /**\r\n   * Loads settings for tab Layout.\r\n   */\r\n  static loadSettings() {\r\n    TabLayout.loadLayoutConfigs();\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for tab Layout.\r\n   */\r\n  static addEvents() {\r\n    query('[name=\"_Layout.Toolbar.Position\"]').removeEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n    query('[name=\"_Layout.Toolbar.Position\"]').addEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n    query('[name=\"_Layout.Toolbar.Order\"]').removeEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n    query('[name=\"_Layout.Toolbar.Order\"]').addEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n\r\n    query('[name=\"_Layout.ToolbarContext.Position\"]').removeEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n    query('[name=\"_Layout.ToolbarContext.Position\"]').addEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n    query('[name=\"_Layout.ToolbarContext.Order\"]').removeEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n    query('[name=\"_Layout.ToolbarContext.Order\"]').addEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n\r\n    query('[name=\"_Layout.Gallery.Position\"]').removeEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n    query('[name=\"_Layout.Gallery.Position\"]').addEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n    query('[name=\"_Layout.Gallery.Order\"]').removeEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n    query('[name=\"_Layout.Gallery.Order\"]').addEventListener('change', TabLayout.handleLayoutInputsChanged, false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Save settings as JSON object.\r\n   */\r\n  static exportSettings() {\r\n    const settings = getChangedSettingsFromTab('layout');\r\n\r\n    const oldLayout = TabLayout.convertRawLayoutToLayoutObject();\r\n\r\n    // get layout settings\r\n    let hasChanged = false;\r\n    const layout: Record<string, string> = {};\r\n    TabLayout.getLayoutSettingObjectFromDOM(item => {\r\n      if (oldLayout[item.controlName].position !== item.position) hasChanged = true;\r\n      if (oldLayout[item.controlName].order !== item.order) hasChanged = true;\r\n\r\n      layout[item.controlName] = [item.position, item.order].join(';');\r\n    });\r\n\r\n    if (hasChanged) settings.Layout = layout;\r\n\r\n    return settings;\r\n  }\r\n\r\n\r\n  private static loadLayoutConfigs() {\r\n    const layout = TabLayout.convertRawLayoutToLayoutObject(_pageSettings.config?.Layout);\r\n\r\n    Object.keys(layout).forEach((controlName: LayoutControlName) => {\r\n      const { position, order } = layout[controlName];\r\n\r\n      query<HTMLSelectElement>(`[name=\"_Layout.${controlName}.Position\"]`).value = position;\r\n      query<HTMLSelectElement>(`[name=\"_Layout.${controlName}.Order\"]`).value = order;\r\n    });\r\n\r\n    TabLayout.loadLayoutMapDOM(layout);\r\n  }\r\n\r\n\r\n  private static loadLayoutMapDOM(layout?: ILayoutObject) {\r\n    layout ||= TabLayout.getLayoutSettingObjectFromDOM();\r\n\r\n    // clear all DOM buttons\r\n    queryAll('.app-layout .region-drop[data-order]').forEach(el => el.innerHTML = '');\r\n\r\n    for (const controlName in layout) {\r\n      if (!Object.prototype.hasOwnProperty.call(layout, controlName)) continue;\r\n      const item = layout[controlName as LayoutControlName];\r\n\r\n      const regionEl = query(`.app-layout [data-position=\"${item.position}\"i] .region-drop[data-order=\"${item.order}\"]`);\r\n      if (regionEl === null) continue;\r\n\r\n      regionEl.innerHTML = `\r\n        <button draggable=\"true\" tabindex=\"-1\" data-control=\"${controlName}\">\r\n          <span lang-text=\"FrmSettings.Tab.Layout._${controlName}\">[${controlName}]</span>\r\n        </button>`;\r\n    }\r\n\r\n    Language.load();\r\n\r\n    // add drag/drop events\r\n    queryAll('.app-layout button[draggable=\"true\"]').forEach(btnEl => {\r\n      btnEl.removeEventListener('dragstart', TabLayout.handleLayoutItemDragStart, false);\r\n      btnEl.addEventListener('dragstart', TabLayout.handleLayoutItemDragStart, false);\r\n    });\r\n\r\n    queryAll('.app-layout .region-drop').forEach(el => {\r\n      el.removeEventListener('dragover', (e) => TabLayout.handleLayoutItemDragOver(e), false);\r\n      el.addEventListener('dragover', (e) => TabLayout.handleLayoutItemDragOver(e), false);\r\n\r\n      el.removeEventListener('dragenter', (e) => TabLayout.handleLayoutItemDragEnter(e, el), false);\r\n      el.addEventListener('dragenter', (e) => TabLayout.handleLayoutItemDragEnter(e, el), false);\r\n\r\n      el.removeEventListener('dragleave', (e) => TabLayout.handleLayoutItemDragLeave(e, el), false);\r\n      el.addEventListener('dragleave', (e) => TabLayout.handleLayoutItemDragLeave(e, el), false);\r\n      el.removeEventListener('dragend', (e) => TabLayout.handleLayoutItemDragEnd(e), false);\r\n      el.addEventListener('dragend', (e) => TabLayout.handleLayoutItemDragEnd(e), false);\r\n\r\n      el.removeEventListener('drop', (e) => TabLayout.handleLayoutItemDrop(e, el), false);\r\n      el.addEventListener('drop', (e) => TabLayout.handleLayoutItemDrop(e, el), false);\r\n    });\r\n  }\r\n\r\n\r\n  private static convertRawLayoutToLayoutObject(rawLayout?: Partial<Record<LayoutControlName, string>>): ILayoutObject {\r\n    rawLayout ||= {};\r\n    const layout = TabLayout.defaultLayout;\r\n\r\n    for (const key in layout) {\r\n      if (!Object.prototype.hasOwnProperty.call(layout, key)) continue;\r\n      const controlName = key as LayoutControlName;\r\n\r\n      const arr = rawLayout[controlName]?.split(';').filter(Boolean) || [];\r\n      let position = arr[0] ?? layout[controlName].position;\r\n      let order = arr[1] ?? layout[controlName].order;\r\n\r\n      layout[controlName] = { position, order };\r\n    }\r\n\r\n    return layout as ILayoutObject;\r\n  }\r\n\r\n\r\n  private static getLayoutSettingObjectFromDOM(callbackFn?: (item: {\r\n    controlName: LayoutControlName,\r\n    position: string,\r\n    order: string,\r\n  }) => any): ILayoutObject {\r\n    const layout: Partial<ILayoutObject> = {};\r\n\r\n    ['Toolbar', 'ToolbarContext', 'Gallery'].forEach((controlName: LayoutControlName) => {\r\n      const position = query<HTMLSelectElement>(`[name=\"_Layout.${controlName}.Position\"]`).value || '0';\r\n      const order = query<HTMLSelectElement>(`[name=\"_Layout.${controlName}.Order\"]`).value || '0';\r\n      if (callbackFn) callbackFn({ controlName, position, order });\r\n\r\n      layout[controlName] = { position, order };\r\n    });\r\n\r\n    return layout as ILayoutObject;\r\n  }\r\n\r\n\r\n  private static handleLayoutInputsChanged(e: Event) {\r\n    e.preventDefault();\r\n\r\n    const layout = TabLayout.getLayoutSettingObjectFromDOM();\r\n    TabLayout.loadLayoutMapDOM(layout);\r\n\r\n    // hide gallery order if the position is either left / right\r\n    const hideGalleryOrder = layout.Gallery.position === 'Left' || layout.Gallery.position === 'Right';\r\n    query('#Section_LayoutGalleryOrder').toggleAttribute('hidden', hideGalleryOrder);\r\n  }\r\n\r\n\r\n  private static handleLayoutItemDragStart(e: DragEvent) {\r\n    const btnEl = e.target as HTMLButtonElement;\r\n    const fromControlName = btnEl.getAttribute('data-control');\r\n    const fromPosition = btnEl.closest('[data-position]').getAttribute('data-position');\r\n    const fromOrder = btnEl.closest('[data-order]').getAttribute('data-order');\r\n\r\n    const data = JSON.stringify({ fromControlName, fromPosition, fromOrder });\r\n    e.dataTransfer.setData('application/json', data);\r\n    e.dataTransfer.effectAllowed = 'move';\r\n\r\n    // don't allow to drop toolbar to left/right position\r\n    if (fromControlName.toLowerCase().includes('toolbar')) {\r\n      query('[data-position=\"Left\"i] .region-drop').classList.add('nodrop');\r\n      query('[data-position=\"Right\"i] .region-drop').classList.add('nodrop');\r\n    }\r\n\r\n    // disable child el to receive drag events\r\n    queryAll('.app-layout button[draggable=\"true\"]').forEach(el => {\r\n      el.style.pointerEvents = 'none';\r\n    });\r\n    btnEl.style.pointerEvents = '';\r\n  }\r\n\r\n\r\n  private static handleLayoutItemDragOver(e: DragEvent) {\r\n    e.preventDefault();\r\n    e.dataTransfer.dropEffect = 'move';\r\n  }\r\n\r\n\r\n  private static handleLayoutItemDragEnter(e: DragEvent, dropEL: HTMLElement) {\r\n    e.preventDefault();\r\n    dropEL.classList.add('drag--enter');\r\n  }\r\n\r\n  \r\n  private static handleLayoutItemDragLeave(e: DragEvent, dropEL: HTMLElement) {\r\n    e.preventDefault();\r\n    dropEL.classList.remove('drag--enter');\r\n  }\r\n\r\n\r\n  private static handleLayoutItemDragEnd(e: DragEvent) {\r\n    e.preventDefault();\r\n\r\n    query('[data-position=\"Left\"i] .region-drop').classList.remove('nodrop');\r\n    query('[data-position=\"Right\"i] .region-drop').classList.remove('nodrop');\r\n\r\n    // re-enable child el to receive drag events\r\n    queryAll('.app-layout button[draggable=\"true\"]').forEach(el => {\r\n      el.style.pointerEvents = '';\r\n    });\r\n  }\r\n\r\n\r\n  private static handleLayoutItemDrop(e: DragEvent, toDropEl: HTMLElement) {\r\n    e.preventDefault();\r\n    toDropEl.classList.remove('drag--enter');\r\n\r\n    const toBtnEl = toDropEl.querySelector('button[draggable=\"true\"]') as (HTMLButtonElement | null);\r\n    const toControlName = (toBtnEl?.getAttribute('data-control') || '') as LayoutControlName;\r\n\r\n    // get the drop data\r\n    const jsonData = e.dataTransfer.getData('application/json') || '{}';\r\n    const { fromControlName, fromPosition, fromOrder } = JSON.parse(jsonData) || {};\r\n    if (!fromControlName || !fromPosition || !fromOrder) return;\r\n\r\n    // get the new drop data\r\n    const position = toDropEl.closest('[data-position]').getAttribute('data-position');\r\n    const order = toDropEl.getAttribute('data-order');\r\n\r\n\r\n    // don't allow to drop toolbar to left/right position\r\n    if ((fromControlName.toLowerCase().includes('toolbar') && (position === 'Left' || position === 'Right'))\r\n      || toControlName.toLowerCase().includes('toolbar') && (fromPosition === 'Left' || fromPosition === 'Right')) {\r\n      return;\r\n    }\r\n\r\n\r\n    const fromDropEl = query(`.app-layout [data-position=\"${fromPosition}\"i] .region-drop[data-order=\"${fromOrder}\"]`) as HTMLElement;\r\n    const fromBtnEl = fromDropEl.querySelector('button[draggable=\"true\"]') as HTMLButtonElement;\r\n\r\n    // if the drop region is already occupied\r\n    if (toBtnEl) {\r\n      // swap the elements\r\n      fromDropEl?.appendChild(toBtnEl);\r\n\r\n      query<HTMLSelectElement>(`[name=\"_Layout.${toControlName}.Position\"]`).value = fromPosition;\r\n      query<HTMLSelectElement>(`[name=\"_Layout.${toControlName}.Order\"]`).value = fromOrder;\r\n    }\r\n\r\n    // drop the btn to the drop target\r\n    toDropEl.appendChild(fromBtnEl);\r\n\r\n    query<HTMLSelectElement>(`[name=\"_Layout.${fromControlName}.Position\"]`).value = position;\r\n    query<HTMLSelectElement>(`[name=\"_Layout.${fromControlName}.Order\"]`).value = order;\r\n\r\n    // hide gallery order if the position is either left / right\r\n    if (fromControlName === 'Gallery') {\r\n      const hideGalleryOrder = position === 'Left' || position === 'Right';\r\n      query('#Section_LayoutGalleryOrder').toggleAttribute('hidden', hideGalleryOrder);\r\n    }\r\n  }\r\n}\r\n","import TabGeneral from './TabGeneral';\r\nimport TabImage from './TabImage';\r\nimport TabSlideshow from './TabSlideshow';\r\nimport TabMouse from './TabMouse';\r\nimport TabKeyboard from './TabKeyboard';\r\nimport TabLanguage from './TabLanguage';\r\nimport TabEdit from './TabEdit';\r\nimport TabViewer from './TabViewer';\r\nimport TabToolbar from './TabToolbar';\r\nimport TabGallery from './TabGallery';\r\nimport TabFileAssocs from './TabFileAssocs';\r\nimport TabTools from './TabTools';\r\nimport TabAppearance from './TabAppearance';\r\nimport TabLayout from './TabLayout';\r\n\r\nexport default class Settings {\r\n  /**\r\n   * Loads settings.\r\n   */\r\n  static load() {\r\n    Settings.loadSelectBoxEnums();\r\n    TabLanguage.loadLanguageList();\r\n\r\n\r\n    // auto loads settings for String, Number, Boolean\r\n    for (const configKey in _pageSettings.config) {\r\n      if (!Object.prototype.hasOwnProperty.call(_pageSettings.config, configKey)) {\r\n        continue;\r\n      }\r\n\r\n      const configValue = _pageSettings.config[configKey];\r\n\r\n      // only auto load the settings if the value type is supported\r\n      const canAutoSet = typeof configValue === 'string'\r\n        || typeof configValue === 'number'\r\n        || typeof configValue === 'boolean';\r\n      if (!canAutoSet) continue;\r\n\r\n\r\n      // find the html element\r\n      const el = query(`[name=\"${configKey}\"]`, true);\r\n      if (!el) {\r\n        console.info(`>> Settings.load(): config '${configKey}' not found`);\r\n        continue;\r\n      }\r\n\r\n\r\n      // check the tag name and type\r\n      const tagName = el.tagName.toLowerCase();\r\n      if (tagName === 'select') {\r\n        (el as HTMLSelectElement).value = configValue.toString();\r\n      }\r\n      else if (tagName === 'input') {\r\n        const inputType = el.getAttribute('type').toLowerCase();\r\n        const inputEl = el as HTMLInputElement;\r\n\r\n        if (inputType === 'radio' || inputType === 'checkbox') {\r\n          inputEl.checked = Boolean(configValue);\r\n        }\r\n        else if (inputType === 'color') {\r\n          const colorHex = configValue.toString() || '#00000000';\r\n\r\n          // remove alpha\r\n          inputEl.value = colorHex.substring(0, colorHex.length - 2);\r\n        }\r\n        else {\r\n          inputEl.value = configValue.toString();\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    // load specific settings\r\n    TabGeneral.loadSettings();\r\n    TabImage.loadSettings();\r\n    TabSlideshow.loadSettings();\r\n    TabEdit.loadSettings();\r\n    TabViewer.loadSettings();\r\n    TabToolbar.loadSettings();\r\n    TabGallery.loadSettings();\r\n    TabLayout.loadSettings();\r\n    TabMouse.loadSettings();\r\n    TabKeyboard.loadSettings();\r\n    TabFileAssocs.loadSettings();\r\n    TabTools.loadSettings();\r\n    TabLanguage.loadSettings();\r\n    TabAppearance.loadSettings();\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds events for the footer of setting.\r\n   */\r\n  static addEventsForFooter() {\r\n    query('#BtnCancel').addEventListener('click', () => post('BtnCancel'), false);\r\n\r\n    query('#BtnOK').addEventListener('click', () => {\r\n      const allSettings = Settings.getAllSettings();\r\n      Settings.updateInitSettings(allSettings);\r\n\r\n      post('BtnOK', allSettings, true);\r\n    }, false);\r\n\r\n    query('#BtnApply').addEventListener('click', () => {\r\n      const allSettings = Settings.getAllSettings();\r\n      Settings.updateInitSettings(allSettings);\r\n\r\n      post('BtnApply', allSettings, true);\r\n    }, false);\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets all settings as an object.\r\n   */\r\n  static getAllSettings() {\r\n    const settings: Record<string, any> = {\r\n      ...TabGeneral.exportSettings(),\r\n      ...TabImage.exportSettings(),\r\n      ...TabSlideshow.exportSettings(),\r\n      ...TabEdit.exportSettings(),\r\n      ...TabViewer.exportSettings(),\r\n      ...TabToolbar.exportSettings(),\r\n      ...TabGallery.exportSettings(),\r\n      ...TabLayout.exportSettings(),\r\n      ...TabMouse.exportSettings(),\r\n      ...TabKeyboard.exportSettings(),\r\n      ...TabFileAssocs.exportSettings(),\r\n      ...TabTools.exportSettings(),\r\n      ...TabLanguage.exportSettings(),\r\n      ...TabAppearance.exportSettings(),\r\n    };\r\n\r\n    return settings;\r\n  }\r\n\r\n\r\n  /**\r\n   * Updates the `_pageSettings.config`.\r\n   */\r\n  static updateInitSettings(newSettings: Record<string, any>) {\r\n    const settingKeys = Object.keys(newSettings);\r\n\r\n    settingKeys.forEach(key => {\r\n      if (_pageSettings.config.hasOwnProperty(key)) {\r\n        _pageSettings.config[key] = newSettings[key];\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Loads select box items.\r\n   */\r\n  private static loadSelectBoxEnums() {\r\n    // load enums\r\n    for (const enumName in _pageSettings.enums) {\r\n      if (!Object.prototype.hasOwnProperty.call(_pageSettings.enums, enumName)) {\r\n        continue;\r\n      }\r\n\r\n      const enumKeys = _pageSettings.enums[enumName];\r\n      const selectEls = queryAll<HTMLSelectElement>(`select[data-enum=\"${enumName}\"]`, true);\r\n\r\n      for (const el of selectEls) {\r\n        enumKeys.forEach(key => {\r\n          const optionEl = new Option(`${key}`, key);\r\n          optionEl.setAttribute('lang-text', `_.${enumName}._${key}`);\r\n\r\n          el.add(optionEl);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import { Webview } from './helpers/webview';\r\nimport { query, queryAll, on, post, postAsync } from './helpers/globalHelpers';\r\n\r\nimport Sidebar from './FrmSettings/Sidebar';\r\nimport Language from './FrmSettings/Language';\r\nimport Settings from './FrmSettings/Settings';\r\n\r\nimport TabGeneral from './FrmSettings/TabGeneral';\r\nimport TabImage from './FrmSettings/TabImage';\r\nimport TabSlideshow from './FrmSettings/TabSlideshow';\r\nimport TabMouse from './FrmSettings/TabMouse';\r\nimport TabLanguage from './FrmSettings/TabLanguage';\r\nimport TabEdit from './FrmSettings/TabEdit';\r\nimport TabViewer from './FrmSettings/TabViewer';\r\nimport TabToolbar from './FrmSettings/TabToolbar';\r\nimport TabGallery from './FrmSettings/TabGallery';\r\nimport TabAppearance from './FrmSettings/TabAppearance';\r\nimport TabFileAssocs from './FrmSettings/TabFileAssocs';\r\nimport TabTools from './FrmSettings/TabTools';\r\nimport TabLayout from './FrmSettings/TabLayout';\r\n\r\n\r\n// initialize webview event listeners\r\nwindow._webview = new Webview();\r\n_webview.startListening();\r\n\r\n\r\n// export to global\r\nwindow.query = query;\r\nwindow.queryAll = queryAll;\r\nwindow.on = on;\r\nwindow.post = post;\r\nwindow.postAsync = postAsync;\r\n\r\nif (!window._pageSettings) {\r\n  window._pageSettings = {\r\n    initTab: 'layout',\r\n    config: {},\r\n    lang: {},\r\n    langList: [],\r\n    toolList: [],\r\n    themeList: [],\r\n    enums: {\r\n      ImageOrderBy: [],\r\n      ImageOrderType: [],\r\n      ColorProfileOption: [],\r\n      AfterEditAppAction: [],\r\n      ImageInterpolation: [],\r\n      MouseWheelAction: [],\r\n      MouseWheelEvent: [],\r\n      MouseClickEvent: [],\r\n      BackdropStyle: [],\r\n      ToolbarItemModelType: [],\r\n    },\r\n    icons: {\r\n      Delete: '',\r\n      Edit: '',\r\n      Moon: '',\r\n      Sun: '',\r\n    },\r\n    startUpDir: '',\r\n    configDir: '',\r\n    userConfigFilePath: '',\r\n    defaultThemeDir: '',\r\n    FILE_MACRO: '',\r\n  };\r\n}\r\n_pageSettings.setSidebarActiveMenu = Sidebar.setActiveMenu;\r\n_pageSettings.loadLanguage = Language.load;\r\n_pageSettings.loadSettings = Settings.load;\r\n_pageSettings.loadLanguageList = TabLanguage.loadLanguageList;\r\n_pageSettings.loadBackgroundColorConfig = TabAppearance.loadBackgroundColorConfig;\r\n\r\n\r\n// sidebar\r\nSidebar.addEvents();\r\n\r\n// load settings\r\nSettings.load();\r\nLanguage.load();\r\n\r\n// add event listeners\r\nSettings.addEventsForFooter();\r\nTabGeneral.addEvents();\r\nTabImage.addEvents();\r\nTabSlideshow.addEvents();\r\nTabEdit.addEvents();\r\nTabViewer.addEvents();\r\nTabToolbar.addEvents();\r\nTabGallery.addEvents();\r\nTabLayout.addEvents();\r\nTabMouse.addEvents();\r\nTabFileAssocs.addEvents();\r\nTabTools.addEvents();\r\nTabLanguage.addEvents();\r\nTabAppearance.addEvents();\r\n\r\n// load the last open tab\r\nSidebar.setActiveMenu(_pageSettings.initTab);\r\n","\r\nexport type WebviewEventHandlerFn = (name: string, data?: any) => void;\r\n\r\nexport class Webview {\r\n  public eventHandlers: Record<string, WebviewEventHandlerFn> = {};\r\n\r\n  addEvent(name: string, handler: WebviewEventHandlerFn) {\r\n    this.eventHandlers[name] = handler;\r\n  }\r\n\r\n  removeEvent(name: string) {\r\n    delete this.eventHandlers[name];\r\n  }\r\n\r\n  startListening() {\r\n    // @ts-ignore\r\n    window.chrome.webview?.addEventListener('message', ({ data }) => {\r\n      const eName = data?.Name ?? '';\r\n      const eData = data?.Data ?? '';\r\n      const handler = this.eventHandlers[eName];\r\n      const hasHandler = !!handler;\r\n\r\n      console.info(`ℹ️ Received event '${eName}' (handler=${hasHandler}) with data:`, eData);\r\n\r\n      if (!hasHandler) return;\r\n      handler(eName, eData);\r\n    });\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","Symbol","toStringTag","Object","defineProperty","value","Language","static","langKey","_pageSettings","lang","prototype","hasOwnProperty","call","langValue","queryAll","forEach","el","innerText","title","html","i","childElementCount","replaceAll","children","item","outerHTML","innerHTML","pause","time","data","Promise","resolve","setTimeout","getChangedSettingsFromTab","tab","result","allEls","configName","name","configValue","startsWith","checkValidity","type","checked","config","escapeHtml","replace","openModalDialog","async","selector","purpose","onOpen","onSubmit","isClosed","dialogEl","query","classList","remove","add","addEventListener","e","target","rect","getBoundingClientRect","left","clientX","right","top","clientY","bottom","console","log","keys","key","inputEl","showModal","renderHotkeyList","ulSelector","hotkeys","onChange","ulEl","ulHtml","icons","Delete","load","action","getAttribute","newHotkeys","map","kbdEl","hotkeyItemEl","closest","hotkey","postAsync","openHotkeyPicker","focus","on","handler","_webview","addEvent","TabAppearance","loadThemeList","loadThemeListStatus","handleBackgroundColorChanged","handleSlideshowBackgroundColorChanged","darkTheme","lightTheme","darkEl","lightEl","resetBackgroundColor","resetSlideshowBackgroundColor","colorEL","colorValue","newThemeList","post","settings","DarkTheme","LightTheme","hexColor","BackgroundColor","list","Array","isArray","length","themeList","th","FolderPath","PreviewImage","Info","Name","IsDarkMode","Version","Description","Author","Website","Email","FolderName","Moon","Sun","defaultThemeDir","themeName","themeDir","currentThemeName","document","documentElement","theme","find","colorHex","BgColor","style","setProperty","Sidebar","navItems","from","querySelectorAll","activeTabName","setActiveMenu","tabPageName","tabPageEl","navItem","TabGeneral","isOriginalAutoUpdateEnabled","AutoUpdate","startUpDir","configDir","userConfigFilePath","Date","toISOString","TabImage","colorProfile","ColorProfile","includes","handleColorProfileChanged","handleUseEmbeddedThumbnailOptionsChanged","profileFilePath","trim","ImageBoosterCacheCount","originalColorProfile","useCustomProfile","hidden","enableForRaw","enableForOthers","showSizeSection","TabSlideshow","handleUseRandomIntervalForSlideshowChanged","handleSlideshowIntervalsChanged","fromEl","toEl","max","min","intervalFrom","intervalTo","intervalFromText","toTimeString","intervalToText","useRandomInterval","totalSeconds","dt","minutes","getUTCMinutes","toString","seconds","getUTCSeconds","msSeconds","getUTCMilliseconds","TabMouse","MouseWheelActions","Scroll","CtrlAndScroll","ShiftAndScroll","AltAndScroll","resetDefaultMouseWheelActions","newWheelScrollValue","newWheelCtrlAndScrollValue","newWheelShiftAndScrollValue","newWheelAltAndScrollValue","mouseWheelActions","TabKeyboard","TabLanguage","handleLanguageChanged","removeEventListener","onBtn_RefreshLanguageList","onLnk_InstallLanguage","newLangList","loadLanguageList","langFileName","langList","FileName","Metadata","selectEl","options","displayText","LocalName","EnglishName","optionEl","Option","TabEdit","TabViewer","zoomLevels","ZoomLevels","join","handleZoomLevelsChanged","handleZoomLevelsBlur","getZoomLevels","originalLevelsString","newLevelsString","some","Number","isFinite","setCustomValidity","split","filter","Boolean","parseFloat","TabToolbar","TabGallery","TabFileAssocs","TabTools","loadToolList","defaultTool","ToolId","ToolName","Executable","Arguments","FILE_MACRO","Hotkeys","IsIntegrated","addEventsForToolDialog","updateToolCommandPreview","tool","getToolDialogFormData","setToolItemToList","originalToolListJson","JSON","stringify","toolList","Tools","getToolListFromDom","tbodyEl","tbodyHtml","btnDeleteHtml","args","hotkeysHtml","index","chkIntegratedHtml","HOTKEY_SEPARATOR","Edit","trEl","toolId","editTool","toolHotkeys","oldToolId","toolIndex","findIndex","push","handleBtnBrowseToolClickEvent","executable","filePaths","openFilePicker","TabLayout","defaultLayout","Toolbar","position","order","ToolbarContext","Gallery","loadLayoutConfigs","handleLayoutInputsChanged","oldLayout","convertRawLayoutToLayoutObject","hasChanged","layout","getLayoutSettingObjectFromDOM","controlName","Layout","loadLayoutMapDOM","regionEl","btnEl","handleLayoutItemDragStart","handleLayoutItemDragOver","handleLayoutItemDragEnter","handleLayoutItemDragLeave","handleLayoutItemDragEnd","handleLayoutItemDrop","rawLayout","arr","callbackFn","preventDefault","hideGalleryOrder","toggleAttribute","fromControlName","fromPosition","fromOrder","dataTransfer","setData","effectAllowed","toLowerCase","pointerEvents","dropEffect","dropEL","toDropEl","toBtnEl","querySelector","toControlName","jsonData","getData","parse","fromDropEl","fromBtnEl","appendChild","Settings","loadSelectBoxEnums","configKey","info","tagName","inputType","substring","loadSettings","allSettings","getAllSettings","updateInitSettings","exportSettings","newSettings","enumName","enums","enumKeys","selectEls","setAttribute","window","eventHandlers","removeEvent","startListening","chrome","webview","eName","eData","Data","hasHandler","hideWarning","els","autoConvertToJson","msgData","postMessage","hasResult","eventName","eventData","initTab","ImageOrderBy","ImageOrderType","ColorProfileOption","AfterEditAppAction","ImageInterpolation","MouseWheelAction","MouseWheelEvent","MouseClickEvent","BackdropStyle","ToolbarItemModelType","setSidebarActiveMenu","loadLanguage","loadBackgroundColorConfig","addEvents","addEventsForFooter"],"sourceRoot":""}