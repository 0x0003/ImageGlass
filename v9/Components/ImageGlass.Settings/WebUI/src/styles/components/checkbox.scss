@mixin controlOptions() {
  opacity: 0 !important;
  position: absolute;
  z-index: -1;
  top: 0;
  right: 0;
  bottom: 0;
  right: 0;
  pointer-events: none;

  // normal style
  &+ * {
    padding-left: calc(var(--box-size) + 0.5em);

    &::before,
    &::after {
      content: "";
      display: block;
      width: var(--box-size);
      height: var(--box-size);
      position: absolute;
      left: 0;
      top: 0.1rem;

      transition: all ease 100ms;
    }

    &::before {
      background-color: rgb(var(--ControlBg));
      border: 0.075rem solid var(--ControlBorder);
      border-radius: var(--box-border-radius);
    }
    &::after {
      opacity: 0;
      top: calc(0.1rem + 0.3em);
      left: 0.2em;
      width: calc(var(--box-size) / 1.5);
      height: calc(var(--box-size) / 3);
      border-left: 0.175em solid rgb(255 255 255 / 0.85);
      border-bottom: 0.175em solid rgb(255 255 255 / 0.85);
      border-radius: 0.075em;
      transform: rotate(-45deg);
    }
  }

  &:hover + * {
    &::before {
      background-color: rgb(var(--ControlBgHover));
      border-color: var(--ControlBorderHover);
    }
  }
  &:focus + * {
    &::before {
      border-color: rgb(var(--Accent));
      background-color: rgb(var(--ControlBgPressed));
    }
  }
  &:active + * {
    &::before {
      background-color: rgb(var(--ControlBgPressed));
      border-color: rgb(var(--Accent));
    }
  }
  &:disabled + *,
  &[disabled] + * {
    color: rgb(var(--AppText) / 0.6);

    &::before {
      background-color: rgb(var(--ControlBgDisabled));
      border-color: var(--ControlBorderDisabled);
    }
  }

  // checked style
  &:checked {
    &+ * {
      &::before {
        border-color: transparent;
        background-color: rgb(var(--Accent));
      }
      &::after {
        opacity: 1;
      }

      &:hover::before {
        border-color: var(--ControlBorderHover);
      }
      &:active::before {
        background-color: rgb(var(--ControlBgPressed));
        border-color: rgb(var(--Accent));
      }
    }

    &:focus + * {
      &::before {
        border-color: var(--ControlBorderHover);
      }
    }
    &:disabled + *,
    &[disabled] + * {
      &::before {
        background-color: rgb(var(--ControlBgDisabled));
        border-color: var(--ControlBorderDisabled);
      }
      &::after {
        opacity: 0.4;
      }
    }
  }
}


label.ig-checkbox,
label.ig-radio {
  --box-size: 1.125em;
  --box-border-radius: 0.15em;

  position: relative;
  display: inline-flex;
  align-items: center;
}

label.ig-checkbox {
  input[type=checkbox] {
    @include controlOptions();

    &:focus-visible + *::before {
      @include focusAnimation();
    }
  }
}

label.ig-radio {
  --box-border-radius: 100%;

  input[type=radio] {
    @include controlOptions();

    &+ *::after {
      content: none;
    }
    &:not(:checked):focus-visible + *::before {
      @include focusAnimation();
    }

    &:checked {
      &+ *::before {
        border-color: rgb(var(--Accent));
        background-color: rgb(var(--ControlBg));
        box-shadow: inset 0 0 0 0.25rem rgb(var(--Accent)),
          inset 0 0 0 100rem rgb(var(--InvertColor) / 0.85);
      }

      &:disabled + *,
      &[disabled] + * {
        &::before {
          border-color: var(--ControlBorderDisabled);
          box-shadow: inset 0 0 0 0.25rem rgb(var(--ControlBgDisabled)),
            inset 0 0 0 100rem rgb(var(--InvertColor) / 0.4);
        }
      }
    }
  }
}
